명령어 꿀팁

-- 명령어 확인
man
command, system call, function 등 다양한 리눅스 명령어의 사용법을 알수 있다.

-- 명령어 확인2
help

-- 서버접속
ubuntu 서버접속
ssh 유저명@ip주소
 -i 로 key를 추가해서 사용 가능
ex
ssh -i 나는야멋쟁이키.cer 나는야멋쟁이유저@나는야멋쟁이ip

/usr/lib/firewalld

-- scp방식 파일 던지기
scp /c/나는/경로/입니다/넘길파일.확장자 dsm@ip주소:/home/나는/경로/하하하/저장할디렉토리
서버 > 서버로 보내는 방식이다. 로컬에서 서버로 보낼때 주로 사용했던 방식이며 파일질라 사용해도 괜춘합니다.

************기본적인거**************

-- 이동기
cd 디렉토리명
cd home 이런식으로 들어갈수 있다.
cd home/퇴근/원한다
이런식으로 한번에 여러곳을 들어갈수도 있다.

cd .. 	디렉토리 나가기

cd -	이전 디렉토리로 가기	직접 써보는게 제일 이해가 빠른친구 별거없다.

cd ~	홈 디렉토리로 가기

-- 디렉토리 파일 확인
ls -al
개인적으로 이걸 가장많이 사용하고 보기가 편해서 사용한다.

--이동 및 이름변경
mv 경로1/경로2/경로3/파일명.확장자 경로1/옮길디렉토리명	파일 옮기기용 mv 명령어

mv 나는야행복한파일.확장자 나는야신나는파일.확장자		파일명 변경용 mv명령어

--복사
cp 나는야원본파일.확장자 나는야복사파일.확장자
파일을 복사한다 경로를 추가해서 넣는거도 가능하다.

--파일 생성
touch 파일명.확장자
파일을 생성한다.

-- 삭제
rm 파일명.확장자
rm test.txt		이런식으로 사용이 가능하다.

-- 디렉토리(폴더) 삭제
rm -rf 디렉토리명
rm -rf testD
이런식으로 사용이 가능하다

++디렉토리 하위 특정 내용 삭제
rm -rf ./DATELOAD_PYD_74/*.txt
./ < 현재위치를 기준 *(모든이름).txt    모든파일중 .txt 확장자를 가진얘들 삭제해라

*/******/*/*** rm 명령어는 조심해서 사용하는걸 추천

-- 경로확인
pwd

결과값 /home/dsm/으악/으아아악
경로 따올때 주로 사용하는 친구입니다.

-- 디렉토리 생성
mkdir 원하는디렉토리명
디렉토리 생성할때 사용한다.


-- 압축해제
unzip 압축파일명.확장자
unzip zipFile.zip
이런식으로 사용이 가능하다.


--	파일 열기 및 내용 확인

vi 파일명.확장자
파일을 들어간다. 메모장 여는거와 같은 개념
차이점이 있다면 방향키가 다른경우가 있고
편집할경우 i를 누르고 편집해야함

이동기
숫자 + shift + g		숫자로 입력한 라인으로 간다.
g+g 		맨 위로
shift + g 	맨아래로
home		라인 맨 뒤로
End			라인 맨 앞으로

':/' : 아래 방향으로 탐색
ex :/나는멋진당근 	이라고 치면 현재 커서 기준으로 아래 방향으로 탐색한다.
':?' : 윗 방향으로 탐색
ex :?나는멋진당근	이라고 치면 현재 커서 기준으로 윗 방향으로 탐색한다.

tip /^나는멋진당근	이런식으로 정규표현식도 가능하다.

그후 검색 결과가 나왔을경우에
n : 다음 문자열 탐색
N = shift+n : 이전 문자열 탐색

문자열 변환
%s/[원래문자열]/[바꿀문자열]/[옵션]
ex) 
기본 사용법
:s/못난이/멋쟁이		해석 : 현재 줄에서 첫번째 못난이를 멋쟁이로 바꾼다 하나의 줄에서 해당 문자열을 찾으면 치환하고 끝! 뒤에 똑같은 친구가 있어도 아무런 일이 생기지않음
:%s/못난이/멋쟁이		해석 : 모든 각 줄에서 첫번째 못난이를 멋쟁이로 바꾼다 하나의 줄에서 해당 문자열을 찾으면 치환한다. 같은 라인뒤에 똑같은 못난이가 있어도 아무런 일이 생기지않음
:s/못난이/멋쟁이/g		해석 : g옵션은 해당 라인의 모든 친구들을 바꿔준다. 못난이 > 멋쟁이로	그말은 즉슨 :%s/못난이/멋쟁이/g 이렇게 하면 모든라인에 모든 내용이 바뀐다고 보면 된다.
:%s/못난이/멋쟁이/cg	해석 : 두가지를 알수있다 c라는 새로운 옵션과 옵션은 여러개를 붙일수 있다. 여기서 나온 c는 변환전 체크를 할수있게 해준다.
:%s/못난이/멋쟁이/ig	해석 : 여기서 i친구가 새로왔다 이건 영문같은경우 못난이 대신 This라고 적었을경우 THis같이 대소문자가 다르더라도 변환할수 있게 해주는 옵션이다.

나갈경우 
esc 누른이후
:q!     저장하지 않고 나가기
:wq! 	저장하고 나가기
요상한짓을 하면 그 뭐냐 그그그그 bak 파일인가? 암튼 백업파일같은게 하나 생길수도 있음
이게 그 습관적 컨z라는 병명이 있다. 이걸 누르게 되면 .swp 일명 스왑파일이 생성되게 된다.

jobs		로 작업파일 = 프로세스 확인하기
fg %숫자		로 해당 vi를 포그라운드로 다시 시작할수 있다.
jobs로 프로세스 확인하고 해당 프로세스로 돌아가는 원리다.


or

로그 확인용 ***********
tail -f 파일명.확장자
나갈경우 컨트롤 c 이하 컨씨로 명칭
파일의 끝부분을 출력한다.
이후 추가되는 내용을 실시간으로 확인이 가능한게 특징이며 주로 로그를 볼떄 사용한다. (개인적)

echo 명령어와 비슷한 느낌

or

cat 파일명.확장자
이런친구도 있다 정도로 확인하면 좋은친구입니다.



-- 서버확인
서버 확인하는 방법
ps -ef | grep [입력]

ps 이란
현재 실행중인 process를 확인할떄 사용한다. (process status) (-f:full format, -e 모든 프로세스)

ps 옵션
-e > 모든 프로세스 출력
-f > 풀 포맷으로 보여준다.(UID, PID 등등)

grep 이란
파일 또는 텍스트에서 특정 키워드가 포함된 줄만 출력한다. (g / re / p)

grep 옵션
-i > 대소문자 구분하지 않고 검색
-n > 줄 번호를 함께 출력
-x > 패턴과 단어 전체가 일치하는 라인 출력

|(파이프라인) == pipe 사용하는 이유 
파이프라인은 보통 명령어1 | 명령어2 의 형태를가지고 있다. (명령어1 | 명령어2 | 명령어3) 과 같은 형태도 가능하다.
파이프라인을 사용시 명령어1의 처리 결과를 명령어2로 전달한다.
간단하게 보면 명령어1과 명령어2의 연결을 위해 사용한다고 볼수있다.

grep 명령어는 로그에서 특정 문자열로 검색할때 자주 사용하기도 한다. 여기저기서 많이 사용된다.
grep "찾을 문자열" FileName

단어의 대소문자 구분없이 단어찾기
grep -i "찾을 문자열" FileName

몇번째 줄에 단어가 포함되어 있는지 찾기
grep -n "찾을 문자열" FileName

-- 포트번호 확인용

기본 확인
netstat -nap

열려있는 포트번호 확인
netstat -nap | grep LISTEN

특정 포트번호 확인
netstat -nap | grep "포트번호"


-- 포트번호 추가 열기
firewall-cmd --permanent --zone=public --add-port=8081/tcp

-- 리로드 적용? 같은 느낌 아직 잘 모르는 친구입니다.
firewall-cmd --reload

-- 사용 가능한 모든 서비스/포트 번호 출력
firewall-cmd --list-all

1. 켜기
systemctl start firewalld

--# /etc/init.d/iptables start

2. 끄기
systemctl stop firewalld

3. 상태확인
systemctl status firewalld

4. 서버 시작시 자동시작
systemctl enable firewalld


-- 일반적인 커널에 대한 정보
-- Linux ubuntu 만 되고있음
uname -a

-- 리눅스 버전 확인 명령어
--centOS 는 이상없이 되는데 Linux ubuntu 는 안된다.
--참고 일단 centOS는 레드햇 제휴로 개발한 컴퓨터 운영체제이다. 그래서 사용 불가한듯

cat /etc/redhat-release

--※우분투 버전 확인	****** 
--Ubuntu 16.04 이상 버전에서만 가능
cat /etc/os-release

--이것도 ubuntu 버전 확인하는 방법임
lsb_release -a


-- bit 확인 명령어
getconf LONG_BIT

<ip주소 확인>
	hostname -I
</ip주소 확인>

<찾기 find 명령어>
	<find 기본형태>
		$ find [경로] [옵션] [표현식]
		$ find [PATH] [OPTION] [EXPRESSION]
	</find 기본형태>
	<사용 예시 - 현재 위치 에서 bak 확장자로 끝나는 모든 파일 검색>
		find ./ -name "*.bak"
	</사용 예시 - 현재 위치 에서 bak 확장자로 끝나는 모든 파일 검색>
	<모든 폴더를 검색하여 test가 들어간 파일을 찾는다>
		find / -type f -name "*test*"
	</모든 폴더를 검색하여 test가 들어간 파일을 찾는다>
	
</찾기 find 명령어>

<유저, 그룹 관련>
	<유저 리스트>
		※useradd로 생성된 유저들 리스트를 확인할때 사용된다.
		grep /bin/bash /etc/passwd
	</유저 리스트>
	<유저 생성>
		useradd [옵션] [인자값] [계정]박용덕유저
		ex1) useradd park
		ex2) passwd [유저명]
		--옵션
		-u : 사용자 uid 지정
		-g : 사용자 그룹 지정
		-d : 사용자 홈디렉토리 지정
		-p : 사용자 패스워드 지정
	</유저 생성>
	
	useradd [유저명]
	passwd [유저명]
	
	<유저 목록 조회>
		grep /bin/bash /etc/passwd
		
		or
		
		grep /bin/bash /etc/passwd | cut -f1 -d:
	</유저 목록 조회>
	
	<유저 삭제>
		userdel [옵션] [계정]
		ex) userdel -rf songgun
		
		--옵션
		-f : 강제 삭제
		-r : 계정 삭제 시 모든 정보 삭제
		보통 -rf를 사용하긴 한다.
		
		++ 사용자 소유 파일들 삭제하는법
		sudo killall -u [username]
	</유저 삭제>
	
	<유저 비밀번호 삭제>
		root 계정 로그인 후
		passwd -d (user계정)
		ex) passwd -d maria
		
		<비밀번호 설정>
			passwd (user계정)
			ex) passwd maria
		</비밀번호 설정>
	</유저 비밀번호 삭제>
	
	<유저 수정>
		usermod [옵션] [인자값] [계정]
		ex) usermod -u 1004 songgun  >  uid를 1004로 변경시킨다.
		
		--옵션
		-u : 사용자 uid 변경
		-g : 사용자 그룹 변경
		-d : 사용자 홈 디렉토리 변경
	</유저 수정>
	
	<유저 패스워드 설정>
		passwd [옵션] [계정]
		ex) passwd songgun -> 변경할 패스워드 입력
		
		--옵션
		-d : 패스워드 삭제
	</유저 패스워드 설정>
	
	<그룹(Group) 생성>
		groupadd [옵션] [그룹명]
		ex) groupadd song
	</그룹(Group) 생성>
	
	<그룹(Group) 삭제>
		groupdel [그룹명]
	</그룹(Group) 삭제>
	
	<유저 sudo 부여>
		1. root로 들어가기
		2. vi /etc/sudoers 파일 열기
		3.
		## The COMMANDS section may have other options added to it.
		##
		## Allow root to run any commands anywhere
		밑에
		
		유저아이디 ALL=(ALL:ALL) NOPASSWD:ALL		#이거는 실행할때마다 password를 묻지 않겠다는 뜻이다.
		or
		유저아이디 ALL=(ALL:ALL) ALL:ALL			#이거는 실행할때마다 password를 물어본다.
		
	</유저 sudo 부여>
</유저, 그룹 관련>

<접속관련>
	<최근 접속 기록 및 재부팅 기록 확인 가능>
		last
	</최근 접속 기록 및 재부팅 기록 확인 가능>
	<특정 user의 접속기록 확인>
		last [user]
	</특정 user의 접속기록 확인>
	<특정 시간 이전의 접속기록 확인>
		last -t YYYYMMDDHHMMSS
	</특정 시간 이전의 접속기록 확인>
	<접속 시도부터 모든 보안 기록이 남는 파일>
		cat /var/log/secure
	</접속 시도부터 모든 보안 기록이 남는 파일>
	<로그인 성공 내역 보기>
		cat /var/log/secure | grep Acc
	</로그인 성공 내역 보기>
	<로그인 실패 내역 보기>
		cat /var/log/secure | grep fail
	</로그인 실패 내역 보기>
</접속관련>

<하드웨어 시간 조정>
	<시스템 시간 확인>
		date
	</시스템 시간 확인>
	<하드웨어 시간 확인>
		hwclock
	</하드웨어 시간 확인>
	<시스템 시간 조정>
		시스템 시간 1일 빼기
		sudo date --set='+1 day'
		시스템 시간 3시간 추가
		sudo date --set='+3 hour'
		시스템 시간 7분 추가
		sudo date --set='+7 minutes' 
	</시스템 시간 조정>	
	<시스템 시간을 가져와서 하드웨어 시간 맞추기>
		sudo hwclock --systohc
	</시스템 시간을 가져와서 하드웨어 시간 맞추기>
	<하드웨어 시간을 가져와서 시스템 시간에 맞추기>
		sudo hwclock -r
	</하드웨어 시간을 가져와서 시스템 시간에 맞추기>
</하드웨어 시간 조정>
<CentOS 시스템>
	<※ cpu 코어수>
		명령어 1 > cat /proc/cpuinfo
		명령어 2 > grep -c processor /proc/cpuinfo
		1은 모든 정보를 알려주고
		2는 1중 processor 코어수만 알려준다.

		명령어 3 > cat /proc/cpuinfo | grep processor
		코어 갯수만큼 0부터 나온다.
	</※ cpu 코어수>
	<cpu 정보확인>
		$ cat /proc/cpuinfo
	</cpu 정보확인>
	<cpu 사용률 확인>
		mpstat | tail -1 | awk '{print 100-$NF}'
	</cpu 사용률 확인>
	<cpu 상태확인 1>
		$ top
		<검나 중요한 tip - 1초마다 cpu 상태확인을 하고싶어요>
			1. 엔터를 누르면 바로 지금 상태 사용량으로 갱신된다.
			2. 1초마다 자동 갱신을 하고 싶다면 $ top -d 1 옵션을 사용하면 된다.
		</검나 중요한 tip - 1초마다 cpu 상태확인을 하고싶어요>
		<행마다 알려주는 정보>
			<1행 - 프로세스 시간 간략 요약>
				top - 19:20:12 : 현재 시스템의 시간
				up 21:03 : 현재 시스템이 운영중인 총 시간. 21시간째 리눅스를 운영중
				2 users : 현재 시스템에 접속중인 사용자는 2명
				load average: 0.06, 0.06, 0.07 : 1분, 5분, 15분 간의 시스템 평균 사용률
			</1행 - 프로세스 시간 간략 요약>
			<2행 - 프로세스의 상태>
				Tasks: 299 total : 현재 실행중인 전체 프로세스는 299개
				1 running : 실행중 1개
				290 sleeping : 대기 138개
				8 stopped : 정지 0개
				0 zombie : 좀비상태 0개
			</2행 - 프로세스의 상태>
			<3행 - CPU 상태>
				Cpu(s): 0.1%us, 0.0%sy, 0.0%ni, 99.8%id, 0.0%wa, 0.0%hi, 0.0%si, 0.0%st
				us: 사용자가 사용한 CPU 시간
				sy: 커널이 사용한 CPU 시간
				ni: niced 사용자 프로세스를 실행하는 데 소요 된 시간
				id: 대기시간
				wa: IO 대기 시간
				hi: 하드웨어 인터럽트 사용 시간
				si: 소프트웨어 인터럽트 사용 시간
				st: 하이퍼 바이저가 다른 프로세서를 처리하는 동안 가상 CPU가 대기하는 시간
				!tip : 숫자 1키를 누르면 각 cpu 상세 코어마다 목록을 볼수 있음
			</3행 - CPU 상태>
			<4행 - 메모리 상태>
				Mem: 3925.5 total, 429.5 free, 1261.4 used, 2234.5 buff/cache
				메모리 총 4G,
				1.2G를 사용 중,
				0.4G를 추가 사용 가능.
				2G가 버퍼용/캐쉬 으로 사용중
			</4행 - 메모리 상태>
			<5행 - 스왑 메모리 상태>
				Swap: 1634.2 total, 1632.2 free, 2.0 used, 2373.9 avail Mem- 스왑 공간의 메모리
			</5행 - 스왑 메모리 상태>
		</행마다 알려주는 정보>
		<프로세스 - cpu 사용순서>
			PR - 우선순위 
			NI - Nice value(-20~19 사이의 숫자이며 값이 작을수록 우선순위가 높음) 
			VIRT - 작업에 사용된 가상 메모리 총사용량 
			RES - 프로세스가 사용하는 실제 메모리양 
			SHR - 프로세스가 사용하는 공유 메모리양 
			S - 현재 프로세스의 상태를 나타냄 
			TIME+ - 프로세스가 시작하여 사용한 CPU시간 
		</프로세스 - cpu 사용순서>
	</cpu 상태확인 1>
	<cpu 상태확인 2>
		$ lscpu
	</cpu 상태확인 1>
	<cpu 관련 추가사항>
		# CPU 코어 전체 개수
		$ grep -c processor /proc/cpuinfo
		> 4  # 현재 PC의 가상 CPU 코어 수는 4개


		# 물리 CPU 개수
		$ grep ^processor /proc/cpuinfo  | wc -l
		> 4 # 현재 PC의 물리 CPU 수는 4개.


		# CPU 당 물리 코어 개수
		$ grep 'cpu cores' /proc/cpuinfo | tail -1
		> 4 # 현재 PC의 CPU 당 물리 코어 개수는 4개


		# Hyper Threading 여부
		$ cat /proc/cpuinfo | egrep 'siblings|cpu cores' | head -2
		> siblings       :    4
		> cpu cores    :    4
		# siblings의 값이 cpu cores 값의 2배 라면 Hyper Threading이 활성화 된 것이다.
	</cpu 관련 추가사항>
	
	<※ 디스크용량 확인>
		명령어 1 GB 단위 > df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum/1024/1024 " GB" }'
		전체 용량을 확인 가능하다 내 centOS8 기준으로는
		320.832 GB return 되었다.

		명령어 2 KB 단위 > df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum " KB" }'
	</※ 디스크용량 확인>			
	<번외>
		전체 사용량
			명령어 KB > df -P | grep -v ^Filesystem | awk '{sum += $3} END { print sum " KB" }'
			명령어 GB > df -P | grep -v ^Filesystem | awk '{sum += $3} END { print sum/1024/1024 " GB" }'
		전체 남은 용량
			명령어 KB > df -P | grep -v ^Filesystem | awk '{sum += $4} END { print sum " KB" }'
			명령어 GB > df -P | grep -v ^Filesystem | awk '{sum += $4} END { print sum/1024/1024 " GB" }'

		전체 사용률
			DISK_TOTAL=`df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum; }'`
			DISK_USED=`df -P | grep -v ^Filesystem | awk '{sum += $3} END { print sum; }'`
			DISK_PER=`echo "100*$DISK_USED/$DISK_TOTAL" | bc -l`
			echo "$DISK_PER %"
	</번외>
</CentOS 시스템>
※ OS 버전
신구대리님 pic 1 > cat /etc/*release*
신구대리님 pic 2 (커널정보 확인)> uname -a
이거로 보다 정확한 정보를 확인할수 있고  CentOS8.5.2111(4.18.0-348.7.1.el8_5.x86_64)  이런식으로 2개를 조합해서 보다 정확하게 기재해야한다.


명령어 1 > cat /etc/redhat-release


※ 물리 메모리
명령어 1 > free -h
tip > 
-h 제일 보기좋은 형태(기가바이트 베이스) -m 메가바이트 단위 -g 기가바이트 단위 -k 킬로 바이트 단위 -l 최고 최저 메모리 상황을 구분하여 출력
cat /proc/meminfo | grep MemTotal 이런 명령어로 KB로도 확인 가능

※ JVM 메모리 > 이건 ntas에서 잡아먹고있는 메모리를 기재해야한다.
/home/dsm/DataSyncManager/ntasserver/config/Daemon.xml 파일에 vmOption 쪽에 있다 맨밑에 있다.
config 에 데몬.xml에서 설정된 값을 가져오면 된다 최하단에 셋팅되어있다.


★여기서 주워가야할 팁은 jvm을 server class로 실행하면 초기 heap size는 메모리의 1/64 이고, 최대 heap size는 1/4까지 늘어난다.

명령어 1 > java -XX:+PrintFlagsFinal -version 2>&1 | egrep -i 'heapsize|metaspacesize'
위 명령어로 Byte기준으로 알수가 있다.

자바 8 이상에서 가장 추천하는 방식
명령어 2 > java -XX:+PrintFlagsFinal -version 2>&1 | grep -i -E 'heapsize|metaspacesize|version'

명령어 3 > java -XX:+PrintFlagsFinal -version 2>&1 | grep -i -E 'heapsize|permsize|version'


